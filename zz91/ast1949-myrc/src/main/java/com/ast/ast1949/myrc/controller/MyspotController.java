package com.ast.ast1949.myrc.controller;

import java.text.ParseException;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.ast.ast1949.domain.products.ProductsSpot;
import com.ast.ast1949.domain.spot.SpotAuction;
import com.ast.ast1949.domain.spot.SpotOrder;
import com.ast.ast1949.domain.spot.SpotPromotions;
import com.ast.ast1949.dto.PageDto;
import com.ast.ast1949.dto.spot.SpotAuctionDto;
import com.ast.ast1949.dto.spot.SpotOrderDto;
import com.ast.ast1949.dto.spot.SpotPromotionsDto;
import com.ast.ast1949.service.products.ProductsSpotService;
import com.ast.ast1949.service.spot.SpotAuctionService;
import com.ast.ast1949.service.spot.SpotOrderService;
import com.ast.ast1949.service.spot.SpotPromotionsService;
import com.zz91.util.auth.frontsso.SsoUser;
import com.zz91.util.datetime.DateUtil;
import com.zz91.util.lang.StringUtils;

/**
 *	author:kongsj
 *	date:2013-3-7
 */
@Controller
public class MyspotController extends BaseController{
	
	@Resource
	private ProductsSpotService productsSpotService;
	@Resource
	private SpotPromotionsService spotPromotionsService;
	@Resource
	private SpotAuctionService spotAuctionService;
	@Resource
	private SpotOrderService spotOrderService;
	
	@RequestMapping
	public ModelAndView addToPromotions(Map<String, Object>out,Integer productId,HttpServletRequest request,Integer id){
		Integer companyId = getCachedUser(request).getCompanyId();
		SpotPromotions obj = new SpotPromotions();
		do {
			// 修改 促销
			if(id!=null){
				obj = spotPromotionsService.queryByIdAndCompanyId(id, companyId);
			}
			if(obj!=null&&obj.getId()!=null){
				break;
			}
			
			// 新增 促销
			ProductsSpot productsSpot = productsSpotService.queryByProductId(productId);
			Integer spotId = 0;
			if(productsSpot==null){
				spotId = productsSpotService.addOneSpot(productId);
			}else{
				spotId = productsSpot.getId();
			}
			Integer i = spotPromotionsService.applyForPromotions(spotId, productId,companyId);
			if(i>0){
				obj = spotPromotionsService.queryByIdAndCompanyId(i, companyId);
			}else{
				return new ModelAndView("redirect:/myproducts/office_post_list.htm?checkStatus=1&isExpired=0&isPause=0&result=2");
			}
		}while (false);
		out.put("id", obj.getId());
		out.put("spotPromotions", obj);
		return new ModelAndView();
	}
	
	@RequestMapping
	public ModelAndView doEditPromotions(Map<String, Object>out,SpotPromotions spotPromotions,String expiredTimeStr,HttpServletRequest request) throws ParseException{
		// 更新促销信息
		spotPromotions.setExpiredTime(DateUtil.getDate(expiredTimeStr, "yyyy-MM-dd"));
		spotPromotionsService.editOnePromotions(spotPromotions);
		return new ModelAndView("redirect:/myproducts/office_post_list.htm?checkStatus=1&isExpired=0&isPause=0&result=5");
	}
	
	@RequestMapping
	public ModelAndView addToAuction(Map<String, Object> out,Integer productId,HttpServletRequest request,Integer id){
		SpotAuction spotAuction = new SpotAuction();
		do {
			// 修改
			if(id!=null){
				spotAuction = spotAuctionService.queryById(id);
			}
			if(spotAuction!=null&&spotAuction.getId()!=null){
				break;
			}
			
			// 新增
			ProductsSpot productsSpot = productsSpotService.queryByProductId(productId);
			Integer spotId = 0;
			if(productsSpot==null){
				spotId = productsSpotService.addOneSpot(productId);
			}else{
				spotId = productsSpot.getId();
			}
			Integer i = spotAuctionService.applyForAuction(spotId, productId,getCachedUser(request).getCompanyId());
			if(i>0){
				spotAuction = spotAuctionService.queryById(i);
			}else{
				return new ModelAndView("redirect:/myproducts/office_post_list.htm?checkStatus=1&isExpired=0&isPause=0&result=3");
			}
		} while (false);
		out.put("id", spotAuction.getId());
		out.put("spotAuction", spotAuction);
		return new ModelAndView();
	}
	
	@RequestMapping
	public ModelAndView doEditAuction(Map<String, Object>out,SpotAuction spotAuction,String expiredTimeStr) throws ParseException{
		// 更新竞拍信息spotAuctionService
		spotAuction.setExpiredTime(DateUtil.getDate(expiredTimeStr, "yyyy-MM-dd"));
		spotAuctionService.editForAuction(spotAuction);
		return new ModelAndView("redirect:/myproducts/office_post_list.htm?checkStatus=1&isExpired=0&isPause=0&result=5");
	}
	
	@RequestMapping
	public ModelAndView index(Map<String, Object> out,HttpServletRequest request){
		SsoUser user = getCachedUser(request);
		Integer companyId = user.getCompanyId();
		// 我的促销
		SpotPromotions spotPromotions = new SpotPromotions();
		PageDto<SpotPromotionsDto> proPage = new PageDto<SpotPromotionsDto>();
		spotPromotions.setCompanyId(companyId);
		proPage.setPageSize(5);
		proPage = spotPromotionsService.pagePromotions(spotPromotions, proPage);
		out.put("proPage", proPage);
		// 我的竞拍
		SpotAuction spotAuction = new SpotAuction();
		PageDto<SpotAuctionDto> aucPage = new PageDto<SpotAuctionDto>();
		spotAuction.setCompanyId(companyId);
		aucPage.setPageSize(5);
		aucPage = spotAuctionService.pageByCondition(spotAuction, aucPage);
		out.put("aucPage", aucPage);
		
		// 我的订单
		PageDto<SpotOrderDto> ordPage = new PageDto<SpotOrderDto>();
		ordPage = spotOrderService.pageSpotOrderForFront(companyId, "", ordPage);
		out.put("ordPage", ordPage);
		return new ModelAndView();
	}
	
	/**
	 * 促销列表页
	 * @param out
	 * @param spotPromotions
	 * @param page
	 * @param request
	 * @return
	 */
	@RequestMapping
	public ModelAndView promotion(Map<String, Object> out,SpotPromotions spotPromotions,PageDto<SpotPromotionsDto> page,HttpServletRequest request){
		spotPromotions.setCompanyId(getCachedUser(request).getCompanyId());
		page = spotPromotionsService.pagePromotions(spotPromotions, page);
		out.put("page", page);
		out.put("spotPromotions", spotPromotions);
		return new ModelAndView();
	}
	
	/**
	 * 竞拍列表页
	 * @param out
	 * @param spotAuction
	 * @param page
	 * @param request
	 * @return
	 */
	@RequestMapping
	public ModelAndView auction(Map<String, Object> out,SpotAuction spotAuction,PageDto<SpotAuctionDto> page,HttpServletRequest request){
		spotAuction.setCompanyId(getCachedUser(request).getCompanyId());
		page.setPageSize(5);
		page = spotAuctionService.pageByCondition(spotAuction, page);
		out.put("page", page);
		out.put("spotAuction", spotAuction);
		return new ModelAndView();
	}
	
	/**
	 * 订单列表页面
	 * @param out
	 * @param spotOrder
	 * @param page
	 * @param request
	 * @return
	 */
	@RequestMapping
	public ModelAndView order(Map<String, Object> out,SpotOrder spotOrder,PageDto<SpotOrderDto> page,HttpServletRequest request){
		page = spotOrderService.pageSpotOrderForFront(getCachedUser(request).getCompanyId(), spotOrder.getOrderStatus(), page);
		out.put("page", page);
		out.put("spotOrder", spotOrder);
		return new ModelAndView();
	}
	
	/**
	 * 批量导入供求id为现货供求
	 */
	@RequestMapping
	public void importOldToSpot(Map<String, Object>out){
		do {
//			String str = "843883,843876,845017,992269,992251,260247,811939,913875,795249,597175,941684,987985,792578,794319,763122,785462,900178,900186,914667,914657,914632,914627,914599,914597,333458,962015,960699,878539,878527,878523,1018178,804870,805965,830272,830269,828190,828197,830861,831874,836601,785120,785116,1038552,1038553,1038554,766222,600754,745041,717073,919135,800418,980144,1038989,1038993,1039013,946851,801865,820327,820341,1023246,1039357,819735,849692,851774,851769,849695,830125,956882,1039376,1039400,1039401,1039468,792034,832082,835582,824349,1039740,652188,647643,689020,632266,801170,728598,729267,884508,806226,910139,805638,720126,719411,1030755,552518,790850,823358,823359,823858,824250,824266,828026,828033,833821,836363,836368,843583,844456,844462,853519,828490,828575,829372,832390,832396,832403,942790,939615,941988,943800,1016946,808367,1040283,947159,799138,1040559,1040565,1040567,866112,889089,890482,1040708,951839,1040817,1040831,962862,962865,962868,962873,962874,923565,924425,836410,762021,794198,828929,922965,804133,728070,1041271,1038559,793317,937235,1040688,916728,812161,944863,944852,944860,946579,892930,601441,837948,837955,840131,1041819,792128,792130,685728,992416,975057,678317,790489,1041960,968968,1042031,824576,955654,917265,1040456,1040462,1042122,1042169,1042171,1042182,1042191,1042250,1042256,1020639,1020680,835304,858806,1042307,813461,1042379,986124,794431,1042451,951777,1042512,742412,715049,1042560,810437,759646,1041079,1042701,917605,948555,949646,949652,949675,950266,950274,950313,51599,990001,753211,691660,1042874,887812,763430,785218,802310,951207,886625,847084,847087,623670,655622,529557,564619,564614,614484,786661,814571,815006,815017,799223,734154,927492,1043235,889640,889639,889641,1043257,790922,644073,915660,915280,1043649,841863,1039319,823492,823493,888517,797646,989654,819983,546076,879226,880017,957700,1039190,889886,1015539,809511,79113,822107,876317,697656,706638,726376,784090,724392,811954,1039260,1039262,1039263,918897,933161,965485,1039554,1039558,102960,1020917,788924,682220,798356,956034,991254,987250,819024,1044027,1044030,825545,1020085,1040707,133387,966870,681572,938270,838815,1025128,1021428,1044478,790920,877285,877288,877310,877328,877331,877319,877306,760541,952103,1044505,960790,960785,820526,837731,1025265,874611,1033863,1044786,806399,806403,825380,761132,873848,873822,875299,894832,954472,840600,723174,1044110,1042509,954017,954027,962071,1041489,1042097,1042107,1042793,1043753,987508,1040821,1041030,1042704,1040818,875918,708379,1044928,1044933,1045005,1005328,1040342,1045091,816621,812249,447187,791196,975942,978245,978252,978257,978268,978273,978459,978469,978475,979062,979073,979086,979087,979090,980668,1045210,1045213,979167,979181,765506,1044703,844808,660026,861168,876595,876600,687169,808745,808748,907553,838672,822324,822327,793655,925246,925249,925250,925251,926044,926054,837787,838069,896880,837779,837790,840452,842107,1045409,1045413,1045416,1045425,1045424,808151,1045536,1045530,655284,860212,642053,829106,882721,655286,693745,829102,872912,1045644,844509,982082,547681,715197,590643,746550,438947,435997,801088,801089,669189,672521,672524,672528,671351,668853,667831,667827,945001,454811,702828,968764,470498,971686,760683,760690,888354,888220,888116,888072,887531,887518,887513,887402,887422,887390,887218,881720,1045906,946722,833994,883944,857222,931764,1045991,1045253,1045997,1045532,1045570,801838,799842,801842,799845,799847,800864,801234,801240,801844,802344,802345,800866,1046027,1046030,1042611,1042610,1042609,810495,811222,811228,1031906,837679,817232,432574,974211,913240,1043081,1043092,914347,756903,1044565,1046165,868997,1046189,681389,976629,976647,976674,979665,974818,823178,969370,969813,987193,970079,970088,999875,801185,962202,1023632,1046359,1046185,1046209,1046199,1042865,890051,719793,719810,720207,748358,396238,502433,425647,487150,497826,971468,1003911,407045,786226,787349,1040699,937169,945505,945526,947865,948800,967406,977134,985725,990989,795233,973963,858608,1024791,784676,945691,945685,945688,949061,699860,487711,997448,695607,667741,839235,1041241,821440,798978,799001,799005,799008,799644,800075,821442,821446,797996,798756,799643,821447,821455,723566,798720,797950,797997,798551,798749,798752,798754,821450,821453,821457,830859,830873,830883,830884,830888,799639,799640,800076,800077,800078,800080,800083,821425,830854,830869,798988,798995,799000,799012,821460,802599,854219,854221,812053,909516,909513,377937,1013704,831800,872465,875443,668919,1031076,1032491,795535,726773,1046668,818664,1046678,1046682,1046684,1040141,1040150,1040386,1040414,1040139,1046685,1046686,1046688,1046689,1046690,1046691,1046694,1046695,1046696,1046698,1039752,1039753,1043341,1043342,790273,784957,651259,914007,914018,766840,833020,836534,833277,836535,837504,837507,675908,1021564,821109,837443,1031364,885330,961906,1043157,1040701,950609,852327,801112,830181,836602,936147,1026271,1027942,1046817,1045611,1042157,1042151,818362,948867,950002,949982,955797,963877,980029,980045,809128,821568,854842,828630,921796,799717,1010545,1045168,1044119,1044089,1030043,1040326,1040329,1040338,1040792,1040801,1040621,1040638,1040618,1040305,1040617,1040810,1041462,1041473,1041394,1041389,1040825,1040832,1040839,1040813,1040816,1042041,1045632,804106,839716,958010,967097,981795,817671,956438,816785,809238,913880,1026544,1042375,1042236,935324,1042717,1047061,1044749,1044745,1044750,1045626,760034,854361,976372,994907,994927,994954,793525,739473,1047121,925130,931726,931748,931762,931765,934064,934788,935154,939840,944409,944456,945601,947634,883250,886693,1047191,471114,706740,732149,1040544,1040999,1041004,1041090,1041414,1041448,1041153,1042002,1041962,1040556,1040991,1041108,1041128,1041953,1040550,1041143,1041374,1042018,955005,818244,1047235,250547,410120,757838,787906,964074,921400,749964,879366,929828,843309,802471,864718,829764,1047275,1046367,830742,1039710,839826,805752,839822,799671,791033,839830,906211,932743,839828,905151,797958,796081,796063,790353,462648,823974,827193,913883,1047321,1044607,1044743,1044746,1044748,1046017,1046018,1046019,624538,624710,625482,880537,880560,880544,880581,880587,881508,881570,905066,919606,821454,781683,818416,834696,1040680,891924,817520,817517,817609,829918,832200,836216,836221,891913,992635,882000,881499,925122,1037892,1045761,1045772,882033,883865,914829,925086,1014714,962940,738001,1043350,1019768,1019770,1021795,1021797,1021799,1023544,1040897,749952,1032838,761051,1042475,1042468,1040432,1040431,743905,999638,939638,1042195,1042198,1042201,1042202,1042205,1042211,1042217,938251,1039609,1040627,989104,968107,40469,147224,744911,817801,835222,593716,562143,841424,810748,841426,756269,932419,937243,937244,797575,974224,1039886,829290,839787,989404,1041199,656365,790356,924574,924688,786276,832470,832475,825562,831425,599461,1043422,1036584,1036587,801589,803418,812058,919315,803423,818050,997268,997276,819029,821831,833859,841144,841137,963642,966291,966318,966329,966354,997267,997281,999730,999748,999754,999764,1004662,732601,759476,744101,743325,742180,742183,742187,742193,742116,742148,674808,766973,762657,788263,836782,920539,1042058,907829,794264,1045639,1045649,529810,1002630,1002635,1005652,1005653,766832,861229,861295,960271,87352,361173,181474,207451,672256,947141,947149,972671,959358,1008682,818789,913841,968412,1025665,866116,861108,823255,765890,788438,1040177,1043301,903972,903975,904079,906397,1043796,955349,669408,669410,678194,865009,787078,849852,984445,927349,876121,923355,923378,942447,942476,1039619,1039633,704919,704068,704064,797372,874306,99203,1043735,1043739,1043741,1043744,1044300,1043746,1043749,1043752,1044268,1044273,1044279,1044289,1044296,1043267,1043268,1043263,1044292,1043728,1043731,694098,690672,706153,706157,706158,706166,706173,810939,936661,956843,841923,841918,809548,814944,670884,757066,757062,951043,951045,951047,951049,953784,1010786,369880,371470,371473,371475,371479,372293,382099,369874,685969,685980,1047475,747078,747311,826364,829976,746247,834955,847932,704623,681466,807654,807671,825975,834224,838156,847897,847902,919113,591892,657928,645248,327732,375274,378649,378817,383184,347967,327672,548035,327931,378648,378815,338861,343181,630396,653363,1032996,1033018,811960,663222,750536,686801,750539,750546,1047488,1047492,647525,1047507,548990,722061,844377,873339,1036771,1038198,1038209,748013,1038701,1037789,1038168,1038179,1044980,758500,798542,1036742,1036747,1036751,1037798,1037906,1038687,1038132,1038202,963970,1044087,1044095,798546,1037019,1044976,1045472,1045491,1041126,1043227,1045468,1045556,1038188,1038614,1038681,1040296,1041138,1041224,1041345,1041747,1042794,1037023,1037876,1041209,1041759,1042785,698519,698476,699472,699473,699748,1037856,1037861,1037872,1037869,1037881,1043575,1043249,648089,650849,641460,862218,1022172,999064,821618,1044302,622189,1041187,1007614,615158,195017,244276,353800,720712,1046951,890675,952253,747873,964061,916158,916096,916104,916120,916136,916147,916148,916149,916161,916163,916169,970952,970954,970945,970969,832075,307597,657419,822838,925153,1018826,1009318,1023545,985138,978207,985124,985127,985136,675553,641260,602609,602602,399067,359715,955707,763939,1041415,977225,1024216,1024234,1024224";
			String str = "";
			Integer[] intArray = StringUtils.StringToIntegerArray(str);
			for (int i = 0; i < intArray.length; i++) {
				productsSpotService.addOneSpot(intArray[i]);
			}
			
		} while (false);
	}
}
