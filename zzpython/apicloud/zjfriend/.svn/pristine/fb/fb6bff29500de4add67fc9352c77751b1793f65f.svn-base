<!doctype html>
<html lang="chs">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel='stylesheet' type='text/css' href='../css/bootstrap.min.css' />
</head>
<body>
<div class="container-fluid">
    <div class="page-header"><h2>Socket实例</h2></div>
    <div class="row">
        <div class="col-xs-12">
            <div class="row">
                <div class="col-xs-12 btn-group btn-group-justified diy-btn-group-test">
                    <div class="btn-group">
                        <button  tapmode="" type="button" onclick="create()" class="btn btn-primary">
                            创建socket
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xs-12">
            <div class="row">
                <div class="col-xs-12 btn-group btn-group-justified diy-btn-group-test">
                    <div class="btn-group">
                        <button tapmode="" type="button" onclick="senddata(true)" class="btn btn-primary">
                            发送 base64 数据
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xs-12">
            <div class="row">
                <div class="col-xs-12 btn-group btn-group-justified diy-btn-group-test">
                    <div class="btn-group">
                        <button tapmode="" type="button" onclick="senddata(false)" class="btn btn-primary">
                            发送 非base64 数据
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xs-12">
            <div class="row">
                <div class="col-xs-12 btn-group btn-group-justified diy-btn-group-test">
                    <div class="btn-group">
                        <button tapmode="" type="button" onclick="closes()" class="btn btn-primary">
                            主动结束连接
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xs-12">
            <div class="row">
                <div class="col-xs-12 btn-group btn-group-justified diy-btn-group-test">
                    <div class="btn-group">
                        <button  tapmode="" type="button" onclick="closes('exit')" class="btn btn-primary">
                            要求服务器结束连接
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</body>
<script type="text/javascript" src="../script/api.js"></script>
<script type="text/javascript">

    var socket = null;
    var dataInput = null;
    apiready = function(){
        socket = api.require('socketManager');
        dataInput = document.getElementById('data');
    }

    function create(){
        socket.createSocket({
            host:'192.168.1.107',
            port:8282,
            returnBase64:false
        }, onstate);
    }

    function closes(cmd){
        if(curSocket){
            if(cmd){
                senddata(cmd);
            }else{
                socket.closeSocket({sid:curSocket});
            }
        }
    }

    var curSocket = null;
    function onstate(ret, err){
        if(!ret){
            alert('error！');
            return;
        }
        var state = ret.state;
        var sid = ret.sid
        var data = ret.data;
        curSocket = sid
        var stateStr = "创建成功";
        if(101 === state){
            stateStr = "创建成功";
        }else if(102 === state){
            stateStr = "连接成功";
        }else if(103 === state){
            stateStr = "收到消息";
        }else if(201 === state){
            stateStr = "创建失败";
        }else if(202 === state){
            stateStr = "连接失败";
        }else if(203 === state){
            stateStr = "异常断开";
        }else if(204 === state){
            stateStr = "正常断开";
        }else if(205 === state){
            stateStr = "发生未知错误";
        }
        var msg = 'sid: '+(sid?sid:'')+'\nstate: '+stateStr+'\ndata: '+(data?data:'');
        alert(msg);
    }

    function senddata(data){
        var writeData = null;
        if(data){
            writeData = data;
        }else{
            writeData = "APICloud 重新定义移动开发!";
        }
        if(!writeData){
            alert('请输入数据');
            return;
        }
        var b64 = data;
        if(b64 == true){
            var base64 = new Base64();
            writeData = base64.encode(writeData);
        }
        socket.write({
            sid:curSocket,
            data:writeData,
            base64:b64
        }, function(ret,err){
            if(ret && ret.status){
                alert('write success');
            } else{
                alert(err.msg);
            }
        });
    }
</script>
<script>
    function Base64() {

        // private property
        _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

        // public method for encoding
        this.encode = function (input) {
            var output = "";
            var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
            var i = 0;
            input = _utf8_encode(input);
            while (i < input.length) {
                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);
                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;
                if (isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if (isNaN(chr3)) {
                    enc4 = 64;
                }
                output = output +
                        _keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
                        _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
            }
            return output;
        }

        // public method for decoding
        this.decode = function (input) {
            var output = "";
            var chr1, chr2, chr3;
            var enc1, enc2, enc3, enc4;
            var i = 0;
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
            while (i < input.length) {
                enc1 = _keyStr.indexOf(input.charAt(i++));
                enc2 = _keyStr.indexOf(input.charAt(i++));
                enc3 = _keyStr.indexOf(input.charAt(i++));
                enc4 = _keyStr.indexOf(input.charAt(i++));
                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;
                output = output + String.fromCharCode(chr1);
                if (enc3 != 64) {
                    output = output + String.fromCharCode(chr2);
                }
                if (enc4 != 64) {
                    output = output + String.fromCharCode(chr3);
                }
            }
            output = _utf8_decode(output);
            return output;
        }

        // private method for UTF-8 encoding
        _utf8_encode = function (string) {
            string = string.replace(/\r\n/g,"\n");
            var utftext = "";
            for (var n = 0; n < string.length; n++) {
                var c = string.charCodeAt(n);
                if (c < 128) {
                    utftext += String.fromCharCode(c);
                } else if((c > 127) && (c < 2048)) {
                    utftext += String.fromCharCode((c >> 6) | 192);
                    utftext += String.fromCharCode((c & 63) | 128);
                } else {
                    utftext += String.fromCharCode((c >> 12) | 224);
                    utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                    utftext += String.fromCharCode((c & 63) | 128);
                }

            }
            return utftext;
        }

        // private method for UTF-8 decoding
        _utf8_decode = function (utftext) {
            var string = "";
            var i = 0;
            var c = c1 = c2 = 0;
            while ( i < utftext.length ) {
                c = utftext.charCodeAt(i);
                if (c < 128) {
                    string += String.fromCharCode(c);
                    i++;
                } else if((c > 191) && (c < 224)) {
                    c2 = utftext.charCodeAt(i+1);
                    string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                    i += 2;
                } else {
                    c2 = utftext.charCodeAt(i+1);
                    c3 = utftext.charCodeAt(i+2);
                    string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                    i += 3;
                }
            }
            return string;
        }
    }

</script>
</html>